
# 파이프라인 스테이지
stages:
  - build
  - push
  - cleanup
  - deploy


#########################
# 1-1. build_FE JOB 단계 #
#########################

build_FE:
  stage: build
  image: docker:27.4.0
  variables:
    IMAGE_NAME: "$IMAGE_FE"
    DOCKERFILE_PATH: FE/Dockerfile
    CONTEXT: FE
    VITE_GOOGLE_CLIENT_ID: "$VITE_GOOGLE_CLIENT_ID"
    VITE_MAIN_API_SERVER_URL: "$VITE_MAIN_API_SERVER_URL"
    VITE_USERS: "$VITE_USERS"
    VITE_USERS_SIGNIN: "$VITE_USERS_SIGNIN"
    VITE_GAME: "$VITE_GAME"
    VITE_GAME_SHUFFLE: "$VITE_GAME_SHUFFLE"
    VITE_TURN_ID: "$VITE_TURN_ID"
    VITE_TURN_PW: "$VITE_TURN_PW"
    VITE_SCENE: "$VITE_SCENE"
    VITE_SCENE_FILTERING: "$VITE_SCENE_FILTERING"
    VITE_SCENE_VOTE: "$VITE_SCENE_VOTE"
  script:
    - echo "==========================="
    - echo "     FRONT-END빌드 중"
    - echo "==========================="

    # 환경 변수 적용 (main 브랜치인 경우 URL & DockerHub 변경)
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        export VITE_MAIN_API_SERVER_URL="$VITE_MAIN_API_SERVER_URL_MAIN"
        export IMAGE_NAME="$IMAGE_FE_MAIN"
      fi
    # 기존 이미지와 태그 중복 방지
    - |
      if [ "$CI_COMMIT_REF_NAME" != "main" ] && [ -n "$(docker images -q)" ]; then
        docker compose down
        docker rmi $(docker images -q)
      fi

    # 환경변수 설정
    - echo "VITE_GOOGLE_CLIENT_ID=$VITE_GOOGLE_CLIENT_ID" >> FE/.env
    - echo "VITE_MAIN_API_SERVER_URL=$VITE_MAIN_API_SERVER_URL" >> FE/.env
    - echo "VITE_USERS=$VITE_USERS" >> FE/.env
    - echo "VITE_USERS_SIGNIN=$VITE_USERS_SIGNIN" >> FE/.env
    - echo "VITE_GAME=$VITE_GAME" >> FE/.env
    - echo "VITE_GAME_SHUFFLE=$VITE_GAME_SHUFFLE" >> FE/.env
    - echo "VITE_TURN_ID=$VITE_TURN_ID" >> FE/.env
    - echo "VITE_TURN_PW=$VITE_TURN_PW" >> FE/.env
    - echo "VITE_SCENE=$VITE_SCENE" >> FE/.env
    - echo "VITE_SCENE_FILTERING=$VITE_SCENE_FILTERING" >> FE/.env
    - echo "VITE_SCENE_VOTE=$VITE_SCENE_VOTE" >> FE/.env

    # 이미지 빌드
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
    - docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:latest

  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "FE/dev" || $CI_COMMIT_BRANCH == "main")
    when: always
  - if: $CI_COMMIT_BRANCH == "CICD/test" || $CI_COMMIT_BRANCH == "CICD/main"
    when: always
  - when: never


#########################
# 1-2. build_BE JOB 단계 #
#########################

build_BE:
  stage: build
  image: gradle:8.12.0-jdk17-alpine
  variables:
    IMAGE_NAME: "$IMAGE_BE"
    DOCKERFILE_PATH: BE/Dockerfile
    CONTEXT: BE

  script:
    - echo "==========================="
    - echo "      BACK-END빌드 중"
    - echo "==========================="

    # 환경 변수 적용 (main 브랜치인 경우 DockerHub 변경)
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        export IMAGE_NAME="$IMAGE_BE_MAIN"
      fi
    
    # 기존 이미지와 태그 중복 방지
    - |
      if [ "$CI_COMMIT_REF_NAME" != "main" ] && [ -n "$(docker images -q)" ]; then
        docker compose down
        docker rmi $(docker images -q)
      fi    

    # 이미지 빌드
    - docker build -t $IMAGE_NAME:$CI_COMMIT_SHA -f $DOCKERFILE_PATH $CONTEXT
    - docker tag $IMAGE_NAME:$CI_COMMIT_SHA $IMAGE_NAME:latest

  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "main")
    when: always
  - if: $CI_COMMIT_BRANCH == "CICD/test" || $CI_COMMIT_BRANCH == "CICD/main"
    when: always
  - when: never


########################
# 2-1. push_FE JOB 단계 #
########################

push_FE:
  stage: push
  variables:
    IMAGE_NAME: "$IMAGE_FE"
    DOCKERHUB_ID: "$DOCKERHUB_USERNAME"
    DOCKERHUB_PW: "$DOCKERHUB_PASSWORD"
  script:
    - echo "==========================="
    - echo "  FRONT-END 이미지 푸쉬 중"
    - echo "==========================="

    # 환경 변수 적용 (main 브랜치인 경우 DockerHub 변경)
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        export IMAGE_NAME="$IMAGE_FE_MAIN"
        export DOCKERHUB_ID="$DOCKERHUB_USERNAME_MAIN"
        export DOCKERHUB_PW="$DOCKERHUB_PASSWORD_MAIN"
      fi

    # DockerHub로 이미지 PUSH
    - echo $DOCKERHUB_PW | docker login -u $DOCKERHUB_ID --password-stdin
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
    
  dependencies:
    - build_FE
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "FE/dev" || $CI_COMMIT_BRANCH == "main")
    when: always
  - if: $CI_COMMIT_BRANCH == "CICD/test" || $CI_COMMIT_BRANCH == "CICD/main"
    when: always
  - when: never


########################
# 2-2. push_BE JOB 단계 #
########################

push_BE:
  stage: push
  variables:
    IMAGE_NAME: "$IMAGE_BE"
    DOCKERHUB_ID: "$DOCKERHUB_USERNAME"
    DOCKERHUB_PW: "$DOCKERHUB_PASSWORD"
  script:
    - echo "==========================="
    - echo "  BACK-END 이미지 푸쉬 중"
    - echo "==========================="

    # 환경 변수 적용 (main 브랜치인 경우 DockerHub 변경)
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        export IMAGE_NAME="$IMAGE_BE_MAIN"
        export DOCKERHUB_ID="$DOCKERHUB_USERNAME_MAIN"
        export DOCKERHUB_PW="$DOCKERHUB_PASSWORD_MAIN"
      fi    

    # DockerHub로 이미지 PUSH
    - echo $DOCKERHUB_PW | docker login -u $DOCKERHUB_ID --password-stdin
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest

  dependencies:
    - build_BE
  rules:
  - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "BE/dev" || $CI_COMMIT_BRANCH == "main")
    when: always
  - if: $CI_COMMIT_BRANCH == "CICD/test" || $CI_COMMIT_BRANCH == "CICD/main"
    when: always
  - when: never


#######################
# 3. cleanup JOB 단계  #
#######################

cleanup:
  stage: cleanup
  image: docker:27.4.0
  variables:
    FE_IMAGE_NAME: "$IMAGE_FE"
    BE_IMAGE_NAME: "$IMAGE_BE"
  script:
    - echo "============================="
    - echo "   도커 이미지 및 캐시 정리 중..."
    - echo "============================="
    
    # 불필요한 이미지 제거
    - docker image prune -f

    # 환경 변수 적용 (main 브랜치인 경우 DockerHub 변경)
    - |
      if [ "$CI_COMMIT_REF_NAME" == "main" ]; then
        export FE_IMAGE_NAME="$IMAGE_FE_MAIN"
        export BE_IMAGE_NAME="$IMAGE_BE_MAIN"
      fi        

    # 특정 이미지 태그 제거
    - docker rmi $FE_IMAGE_NAME:$CI_COMMIT_SHA || true
    - docker rmi $FE_IMAGE_NAME:latest || true
    - docker rmi $BE_IMAGE_NAME:$CI_COMMIT_SHA || true
    - docker rmi $BE_IMAGE_NAME:latest || true

    # GitLab Runner가 사용하는 불필요한 빌드 파일 정리
    - rm -rf /builds/* || true
  rules:
   - when: always


##################
# 4. deploy 단계   #
##################

deploy_main:
  stage: deploy
  variables:
    DB_URL_MAIN: "$DB_URL_MAIN"
    DB_DRIVER_MAIN: "$DB_DRIVER"
    DB_USERNAME_MAIN: "$DB_USERNAME"
    DB_PASSWORD_MAIN: "$DB_PASSWORD_MAIN"
    REDIS_HOST_MAIN: "$REDIS_HOST"
    WEBCLIENT_BASE_URL: "$WEBCLIENT_BASE_URL"
    S3_BUCKET_NAME: "$S3_BUCKET_NAME"
    S3_REGION: "$S3_REGION"
    S3_CREDENTIALS_ACCESS_KEY: "$S3_CREDENTIALS_ACCESS_KEY"
    S3_CREDENTIALS_SECRET_KEY: "$S3_CREDENTIALS_SECRET_KEY"

  script:
    - echo "===================================="
    - echo "        main-server로 배포중..."
    - echo "===================================="

    # main-server .env 파일 생성
    - echo "DB_URL_MAIN=$DB_URL_MAIN" >> .env
    - echo "DB_DRIVER_MAIN=$DB_DRIVER_MAIN" >> .env
    - echo "DB_USERNAME_MAIN=$DB_USERNAME_MAIN" >> .env
    - echo "DB_PASSWORD_MAIN=$DB_PASSWORD_MAIN" >> .env
    - echo "REDIS_HOST_MAIN=$REDIS_HOST_MAIN" >> .env
    - echo "WEBCLIENT_BASE_URL=$WEBCLIENT_BASE_URL" >> .env
    - echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> .env
    - echo "S3_REGION=$S3_REGION" >> .env
    - echo "S3_CREDENTIALS_ACCESS_KEY=$S3_CREDENTIALS_ACCESS_KEY" >> .env
    - echo "S3_CREDENTIALS_SECRET_KEY=$S3_CREDENTIALS_SECRET_KEY" >> .env

    
    #.env 파일을 main-server로 전송
    - scp -i "$MAIN_SERVER_KEY" .env "$MAIN_SERVER_URI:/home/ubuntu/"
    # SSH를 통해 main-server에서 명령어 실행(터미널 생성)
    - |
      ssh -tt -i "$MAIN_SERVER_KEY" "$MAIN_SERVER_URI" << 'EOF'

        # 컨테이너 off
        docker compose down
        # 기존 이미지 제거
        docker rmi $(docker images -q)
        # 컨테이너 on .env 참조
        docker compose --env-file /home/ubuntu/.env up --build -d
        # 나가기
        exit
      EOF

    - echo "===================================="
    - echo "          배포 완료!!!"
    - echo "===================================="
  dependencies:
    - push_FE
    - push_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main"
      when: always
    - if: $CI_COMMIT_BRANCH == "CICD/main"
      when: always
    - when: never

deploy_test:
  stage: deploy
  variables:
    DB_URL_TEST: "$DB_URL"
    DB_USERNAME_TEST: "$DB_USERNAME"
    DB_PASSWORD_TEST: "$DB_PASSWORD"
    DB_DRIVER_TEST: "$DB_DRIVER"
    REDIS_HOST_TEST: "$REDIS_HOST"
    WEBCLIENT_BASE_URL: "$WEBCLIENT_BASE_URL"
    S3_BUCKET_NAME: "$S3_BUCKET_NAME"
    S3_REGION: "$S3_REGION"
    S3_CREDENTIALS_ACCESS_KEY: "$S3_CREDENTIALS_ACCESS_KEY"
    S3_CREDENTIALS_SECRET_KEY: "$S3_CREDENTIALS_SECRET_KEY"
  script:
    - echo "===================================="
    - echo "        test_server로 배포중..."
    - echo "===================================="

    #  디렉토리 이동
    - cd /home/ubuntu/
    # test-server .env 파일 생성 
    - echo "DB_URL_TEST=$DB_URL_TEST" >> .env
    - echo "DB_DRIVER_TEST=$DB_DRIVER_TEST" >> .env
    - echo "DB_USERNAME_TEST=$DB_USERNAME_TEST" >> .env
    - echo "DB_PASSWORD_TEST=$DB_PASSWORD_TEST" >> .env
    - echo "REDIS_HOST_TEST=$REDIS_HOST_TEST" >> .env
    - echo "WEBCLIENT_BASE_URL=$WEBCLIENT_BASE_URL" >> .env
    - echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> .env
    - echo "S3_REGION=$S3_REGION" >> .env
    - echo "S3_CREDENTIALS_ACCESS_KEY=$S3_CREDENTIALS_ACCESS_KEY" >> .env
    - echo "S3_CREDENTIALS_SECRET_KEY=$S3_CREDENTIALS_SECRET_KEY" >> .env

    # 컨테이너 on .env 참조
    - docker compose --env-file /home/ubuntu/.env up --build -d

    - echo "===================================="
    - echo "          배포 완료!!!"
    - echo "===================================="
  dependencies:
    - push_FE
    - push_BE
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_REF_NAME == "FE/dev" || $CI_COMMIT_REF_NAME == "BE/dev")
      when: always
    - if: $CI_COMMIT_BRANCH == "CICD/test"
      when: always
    - when: never



